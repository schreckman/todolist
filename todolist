#!/usr/bin/env python3
# python3 -m pip install -U nuitka
# py to exe: python3 -m nuitka todolist
import argparse
import datetime
import sqlite3 as sl
from tabulate import tabulate  # pip3 install tabulate
from termcolor import colored  # pip3 install termcolor


class Todo:
    def __init__(self, id: int, text: str, added: str, closed: str, prio: int):
        self.id = id
        self.text = text
        self.added = added
        self.closed = closed
        self.priority = prio


class TodoList:

    def __init__(self, database):
        self.con = sl.connect(database)

    def __del__(self):
        self.con.close()

    def addTable(self):
        # create a cursor object
        cursor = self.con.cursor()

        # execute a PRAGMA statement to query the table names in the database
        cursor.execute("PRAGMA table_info(TODO)")

        # fetch the results of the PRAGMA statement
        table_info = cursor.fetchall()

        # check if the table exists by checking if any results were returned by the PRAGMA statement
        if len(table_info) == 0:
            with self.con:
                self.con.execute("""
                    CREATE TABLE TODO (
                        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                        text TEXT,
                        added TIMESTAMP,
                        closed TIMESTAMP,
                        priority TINYINT
                    );
                """)

        # close the cursor and database connection
        cursor.close()

    def addRows(self, todo: str, prio: int):
        # adds row to db
        sql = 'INSERT INTO TODO (text, added, closed, priority) values(?, ?, ?, ?)'
        data = [(todo, datetime.datetime.now(), 'NULL', prio)]

        with self.con:
            self.con.executemany(sql, data)  # führt den SQL befehl aus

    def selectOrderBy(self, order, sequence):
        with self.con:
            sql = f"""select * from TODO order by {order} {sequence}"""
            data = self.con.execute(sql)
            records = data.fetchall()
            self.con.commit()
            list = []
            for row in records:
                todo = Todo(row[0], row[1], row[2], row[3], row[4])
                list.append(todo)
            return list

    def list(self):
        list = self.readTableIntoClass()

        ret = [colored(str("id"), None, None, ["bold", "underline"]),
               colored(str("text"), None, None, ["bold", "underline"]),
               colored(str("finished ?"), None, None, ["bold", "underline"])]
        retList = []
        for i in list:
            if i.closed == "NULL":
                retList.append([str(i.id), i.text, ""])
            else:
                retList.append([colored(str(i.id), None, None, ["bold", "dark"]),
                                colored(str(i.text), None, None, ["bold", "dark"]),
                                colored("done", None, None, ["bold", "dark"])])
        return tabulate(retList, ret, tablefmt="pretty")

    def updateValue(self, id: int):
        str_now = datetime.datetime.now().isoformat()
        sql = """Update TODO set closed = ? where id = ?"""
        data = (str_now, id)
        self.con.execute(sql, data)
        self.con.commit()

    def removeRow(self, id: int):
        sql = """DELETE from TODO where id = ?"""
        data = [id]
        self.con.execute(sql, data)
        self.con.commit()

    def resetTable(self):
        # DROP TABLE table_name;
        self.con.execute("""
            DROP TABLE TODO;
        """)
        self.addTable()

    def sortQueryResult(self, category: str):
        list = self.selectOrderBy(category, "desc")
        self.resetTable()
        for todo in list:
            self.writeClassInfoTable(todo)

    def readTableIntoClass(self):
        sql = """SELECT * from TODO"""
        data = self.con.execute(sql)
        records = data.fetchall()
        list = []
        for row in records:
            todo = Todo(row[0], row[1], row[2], row[3], row[4])
            list.append(todo)
        return list

    def writeClassInfoTable(self, todo):
        sql = 'INSERT INTO TODO (text, added, closed, priority) values(?, ?, ?, ?)'
        data = [(todo.text, todo.added, todo.closed, todo.priority)]

        with self.con:
            self.con.executemany(sql, data)  # führt den SQL befehl aus

    def reshuffle(self):
        list = self.readTableIntoClass()
        self.resetTable()
        for todo in list:
            self.writeClassInfoTable(todo)


parser = argparse.ArgumentParser(description="TODO list by Manuel Schreck")

parser.add_argument("-a", "--add", help="add todolist", required=False, action="store_true")
parser.add_argument("-l", "--list", help="list the todos", required=False, action="store_true")
parser.add_argument("-d", "--done", help="mark a todo as done, needs the id", required=False)
parser.add_argument("-r", "--remove", help="removes a todo from the list, needs the id", required=False)
parser.add_argument("-x", "--reset", help="deletes all todos", required=False, action="store_true")
parser.add_argument("-s", "--sort", help="sorts for text/added/closed/priority tasks", required=False,
                    choices=["text", "added", "closed", "priority"])
parser.add_argument("-z", "--reshuffle_in_db", help="removes blanks in the id counting", required=False,
                    action="store_true")

parser.add_argument("-t", "--todo", help="set the name of the todo, use after --add, --done", required=False)
parser.add_argument("-p", "--priority", help="set the priority of the todo, use after --add. --done", required=False)

args = parser.parse_args()

text = args.todo
prio = args.priority
id_done = args.done
id_remove = args.remove
sort = args.sort

todolist = TodoList('todo.db')
todolist.addTable()

if args.add:
    if args.todo is None:
        print(Fore.RED + "You have to add the --todo argument to --add")
        exit(0)
    if args.priority is None:
        args.priority = 0
    todolist.addRows(text, prio)
    exit(0)

if args.list:
    print(todolist.list())
    exit(0)

if args.done:
    todolist.updateValue(id_done)
    exit(0)

if args.remove:
    todolist.removeRow(id_remove)
    exit(0)

if args.reset:
    todolist.resetTable()
    exit(0)

if args.sort:
    todolist.sortQueryResult(sort)
    exit(0)

if args.reshuffle_in_db:
    todolist.reshuffle()
    exit(0)
