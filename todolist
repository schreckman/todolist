#!/usr/bin/env python3
# py to exe: python3 -m nuitka todolist
import datetime
import sqlite3 as sl
import argparse
from colorama import Fore


class TodoList:

    def __init__(self):
        # constructor
        pass

    @staticmethod
    def addTable():
        # create a cursor object
        cursor = con.cursor()

        # execute a PRAGMA statement to query the table names in the database
        cursor.execute("PRAGMA table_info(TODO)")

        # fetch the results of the PRAGMA statement
        table_info = cursor.fetchall()

        # check if the table exists by checking if any results were returned by the PRAGMA statement
        if len(table_info) > 0:
            print("The table exists!")
        else:
            print("The table does not exist.")
            with con:
                con.execute("""
                    CREATE TABLE TODO (
                        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                        text TEXT,
                        added TIMESTAMP,
                        closed TIMESTAMP,
                        priority TINYINT
                    );
                """)

        # close the cursor and database connection
        cursor.close()

    @staticmethod
    def addRowsToTODO(todo: str, prio: int):
        # adds row to db
        sql = 'INSERT INTO TODO (text, added, closed, priority) values(?, ?, ?, ?)'
        data = [(todo, datetime.datetime.now(), 'NULL', prio)]

        with con:
            con.executemany(sql, data)  # fÃ¼hrt den SQL befehl aus

    @staticmethod
    def listRowsFromTODO():
        # lists the values in db
        with con:
            data = con.execute("SELECT * FROM TODO")
            for row in data:
                print(row)


parser = argparse.ArgumentParser(description="TODO list by Manuel Schreck")

parser.add_argument("-a", "--add", help="add todolist", required=False, action="store_true")
parser.add_argument("-l", "--list", help="list the todos", required=False, action="store_true")
parser.add_argument("-d", "--done", help="mark a todo as done", required=False, action="store_true")
parser.add_argument("-r", "--remove", help="removes a todo from the list", required=False)
parser.add_argument("-x", "--reset", help="deletes all todos", required=False, action="store_true")
parser.add_argument("-s", "--sort", help="sorts completed and uncompleted tasks", required=False, action="store_true")
parser.add_argument("-w", "--raw", help="prints nothing but done/incompleted tasks in plain text, useful for scripting",
                    required=False)
parser.add_argument("-sp", "--sortpriority", help="lists the todos after the priority: low/high", required=False)
parser.add_argument("-t", "--todo", help="set the name of the todo, use after --add, --done", required=False)
parser.add_argument("-p", "--priority", help="set the priority of the todo, use after --add. --done", required=False)

args = parser.parse_args()
con = sl.connect('todo.db')

print("add:", args.add)
print("list:", args.list)
print("done:", args.done)
print("remove:", args.remove)
print("reset:", args.reset)
print("sort:", args.sort)
print("raw:", args.raw)
print("sort priority:", args.sortpriority)
print("todo:", args.todo)
print("priority:", args.priority)

text = args.todo
prio = args.priority

todolist = TodoList
todolist.addTable()

if args.add:
    if args.todo is None:
        print(Fore.RED + "You have to add the --todo argument to --add")
        exit(0)
    if args.priority is None:
        args.priority = 0
    print(str(todolist))
    todolist.addRowsToTODO(str(text), int(prio))


# todolist.addRowsToTODO()
todolist.listRowsFromTODO()

# program argumente einlesen und analysieren -> task bearbeiten -> beenden
